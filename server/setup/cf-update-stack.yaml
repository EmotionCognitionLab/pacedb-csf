Parameters:
  AdminEmailParam:
    Type: String
    Description: The email address of an admin user
  AdminFirstNameParam:
    Type: String
    Default: Dev
    Description: The first name of an admin user
  AdminLastNameParam:
    Type: String
    Default: Admin
    Description: The last name of an admin user
  AdminPhotoUrlParam:
    Type: String
    Description: The url of a photo that will be used for the admin user
  AdminSubjectIdParam:
    Type: String
    Default: 1
    Description: The subject id assigned to the admin user
  CognitoUserPoolIdParam:
    Type: String
    Description: The id of the cognito user pool that will hold all of our users
  ServiceParam:
    Type: String
    Default: pbcsf
    Description: The name of the service that you're creating with this stack
  StageParam:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
  
Resources:
# S3 bucket for storing pictures of users
  imgBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: 
        Fn::Sub: ${ServiceParam}-${StageParam}-usr-imgs
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - "PUT"
              - "POST"
            AllowedOrigins:
              - "*"
            MaxAge: 3000
      WebsiteConfiguration:
        IndexDocument: index.html

# S3 bucket for storing automatically-uploaded user training data
  dataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: 
        Fn::Sub: ${ServiceParam}-${StageParam}-usr-data


# S3 bucket for report-related info
  reportingBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        Fn::Sub: ${ServiceParam}-${StageParam}-reporting
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - "PUT"
              - "POST"
            AllowedOrigins:
              - "*"
            MaxAge: 3000
      WebsiteConfiguration:
        IndexDocument: index.html

# start of cognito setup
# see https://gist.github.com/singledigit/2c4d7232fa96d9e98a3de89cf6ebe7a5 for example
    # SNS role so that cognito can send SMS messages
    # This is created in cf-create-stack.yaml, but if we don't maintain it here the update
    # operation wipes it out.
  cognitoSNSRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Service: 
                - "cognito-idp.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "CognitoSNSPolicy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action: "sns:publish"
                Resource: "*"
# cognito user pool group for staff
  cognitoStaffGroup:
    Type: "AWS::Cognito::UserPoolGroup"
    Properties:
      GroupName: staff
      Description: "lab staff"
      Precedence: 1
      RoleArn: 
        Fn::GetAtt: [clientAdminRole, Arn]
      UserPoolId:
        Ref: CognitoUserPoolIdParam
# cognito user pool client for use by the identity pool (and the front-end app)
  cognitoUserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      ClientName: 
        Fn::Sub: ${ServiceParam}-${StageParam}-client
      ExplicitAuthFlows:
        - ADMIN_NO_SRP_AUTH
      GenerateSecret: false
      RefreshTokenValidity: 30
      UserPoolId: 
        Ref: CognitoUserPoolIdParam
# our cognito identity pool
  cognitoIdPool:
    Type: "AWS::Cognito::IdentityPool"
    Properties:
      IdentityPoolName: 
        Fn::Sub: ${ServiceParam}${StageParam}IdPool
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders: 
        - ClientId: !Ref cognitoUserPoolClient
          ProviderName:
            Fn::Sub: cognito-idp.${AWS::Region}.amazonaws.com/${CognitoUserPoolIdParam}
  clientAdminAccount:
    Type: "AWS::Cognito::UserPoolUser"
    Properties:
      DesiredDeliveryMediums: 
        - EMAIL
      UserAttributes:
        - Name: email
          Value: !Ref AdminEmailParam
        - Name: given_name
          Value: !Ref AdminFirstNameParam
        - Name: family_name
          Value: !Ref AdminLastNameParam
        - Name: picture
          Value: !Ref AdminPhotoUrlParam
        - Name: "custom:group"
          Value: !Ref cognitoStaffGroup
        - Name: "custom:subjectId"
          Value: !Ref AdminSubjectIdParam
      Username: !Ref AdminEmailParam
      UserPoolId: !Ref CognitoUserPoolIdParam
# add the admin user to the cognito group for staff
# note that the cognito group is used in parallel
# with the custom:group attribute on the user pool -
# membership in the cognito group controls whether you are
# granted admin privileges via IAM, while the setting of
# the custom:group attribute controls which group of subjects
# you're a member of
# TODO this config DOES NOT WORK.
# The problem is that when we ask clientAdminAccount for the username,
# it hands back an email address, triggering a "User does not exist" error.
# I suspect that if it returned the GUID instead of the email all would be well.
# Possible fixes:
# 1. Create the user in code and hand the guid back in to cf
# drawbacks:
#  - have to move the creation of the staff group and admin role into the cf-create template
#  - have to manually delete the user on destroy? Or does that happen already in user pool deletion?

#  2. Switch to doing email and phone as aliases and manually assigning GUID at registration
#  drawbacks:
#   - have to change client code to assign guids
#   - requires a lot of manual testing
#  advantages:
#   - could stop creating the pool in code
  # adminIsStaff:
  #   Type: "AWS::Cognito::UserPoolUserToGroupAttachment"
  #   Properties:
  #     GroupName: !Ref cognitoStaffGroup
  #     Username: !Ref clientAdminAccount
  #     UserPoolId: !Ref CognitoUserPoolIdParam

# role for unauthorized cognito users
  cognitoUnauthorizedRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Federated: "cognito-identity.amazonaws.com"
            Action: 
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals: 
                "cognito-identity.amazonaws.com:aud": 
                  Ref: cognitoIdPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": unauthenticated
      Policies:
        - PolicyName: "CognitoUnauthorizedPolicy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                Resource: "*"
# end of cognito setup

# policy to allow reading all dynamodb tables
  dynamoReadAccess:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Description: Allows read access to tables
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "dynamodb:BatchGetItem"
              - "dynamodb:GetItem"
              - "dynamodb:Query"
              - "dynamodb:Scan"
            Resource:
              - "Fn::Sub": "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ServiceParam}-${StageParam}-*"
      ManagedPolicyName: 
        Fn::Sub: "${ServiceParam}-${StageParam}-dynamo-read"

# policy to allow writing cloudwatch logs
  cloudwatchWriteAccess:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Description: Allows writing logs to cloudwatch
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"
              - "logs:DescribeLogStreams"
            Resource: "arn:aws:logs:*:*:*"
      ManagedPolicyName:
        Fn::Sub: "${ServiceParam}-${StageParam}-cloudwatch-write"

# policy to allow reading from the data bucket
  dataBucketReadAccess:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Description: Allows reading from the data bucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "s3:ListBucket"
            Resource: 
              - Fn::GetAtt: [dataBucket, Arn]
          - Effect: "Allow"
            Action:
              - "s3:GetObject"
            Resource: 
              - Fn::Sub: "arn:aws:s3:::${dataBucket}/*"
      ManagedPolicyName:
        Fn::Sub: "${ServiceParam}-${StageParam}-databucket-read"

# user account for the software on subject machines to upload data
  dataUploader:
    Type: "AWS::IAM::User"
    Properties:
      Policies:
        - PolicyName: "dataBucketWrite"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:PutObject"
                Resource:
                  - Fn::Sub: "arn:aws:s3:::${dataBucket}/*"

# access key for the data uploader user
  dataUploaderKey:
    Type: "AWS::IAM::AccessKey"
    Properties:
      UserName:
        Ref: dataUploader

# user account for the software on subject machines to read upload bucket info
  keyReader:
    Type: "AWS::IAM::User"
    Properties:
      Policies:
        - PolicyName: "smReader"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
            - Effect: "Allow"
              Action:
                - "secretsmanager:GetSecretValue"
              Resource:
                - Fn::Sub: "${dataUploaderSecret}"

# access key for the sm reader user
  smReaderKey:
    Type: "AWS::IAM::AccessKey"
    Properties:
      UserName:
        Ref: keyReader

# secret holding data bucket name and credentials
  dataUploaderSecret:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Description: "Name of and credentials for bucket that subject practice data is uploaded to."
      Name:
          Fn::Sub: ${ServiceParam}/${StageParam}/uploader
      SecretString:
          Fn::Sub: '{"bucket": "${dataBucket}", "key": "${dataUploaderKey}", "secret": "${dataUploaderKey.SecretAccessKey}"}'


# role for client app admins
  clientAdminRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Federated: "cognito-identity.amazonaws.com"
            Action: 
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals: 
                "cognito-identity.amazonaws.com:aud": 
                  Ref: cognitoIdPool
      Policies:
        - PolicyName: "dynamoAllAccess"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action:
                  - "dynamodb:DeleteItem"
                  - "dynamodb:GetItem"
                  - "dynamodb:PutItem"
                  - "dynamodb:Scan"
                  - "dynamodb:Query"
                  - "dynamodb:UpdateItem"
                Resource:
                  - "Fn::Sub": "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${ServiceParam}-${StageParam}-*"
        - PolicyName: "s3WriteUserImages"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:PutObject"
                  - "s3:PutObjectAcl"
                Resource:
                  - Fn::Sub: "arn:aws:s3:::${imgBucket}/*"
  snsPublishAccess:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Description: Allows publishing to SNS
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "sns:Publish"
            Resource: 
              - "*"
      ManagedPolicyName:
        Fn::Sub: "${ServiceParam}-${StageParam}-sns-publish"
  sesSendAccess:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      Description: Allows sending email via SES
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "ses:SendEmail"
              - "ses:SendRawEmail"
              - "ses:SendTemplatedEmail"
            Resource: 
              - "*"
      ManagedPolicyName:
        Fn::Sub: "${ServiceParam}-${StageParam}-ses-send"
Outputs:
  ClientAdminAccount:
    Value:
      Ref: clientAdminAccount
  ClientAdminRoleARN:
    Value:
      Fn::GetAtt: [clientAdminRole, Arn]
    Export:
      Name: !Sub "${ServiceParam}-${StageParam}-clientAdminRoleARN"
  CloudwatchWriteAccess:
    Value:
      Ref: cloudwatchWriteAccess
    Export:
      Name: !Sub "${ServiceParam}-${StageParam}-cloudwatchWriteAccess"
  CognitoSNSRoleARN:
    Value:
      Fn::GetAtt: [cognitoSNSRole, Arn]
  CognitoStaffGroup:
    Value:
      Ref: cognitoStaffGroup
    Export:
      Name: !Sub "${ServiceParam}-${StageParam}-cognitoStaffGroup"
  IdentityPoolId:
    Value: 
      Ref: cognitoIdPool
    Export:
      Name: !Sub "${ServiceParam}-${StageParam}-identityPoolId"
  CognitoUnauthorizedRole:
    Value:
      Fn::GetAtt: [cognitoUnauthorizedRole, Arn]
    Export:
      Name: !Sub "${ServiceParam}-${StageParam}-cognitoUnauthorizedRole"
  DataBucketReadAccess:
    Value:
      Ref: dataBucketReadAccess
    Export:
      Name: !Sub "${ServiceParam}-${StageParam}-dataBucketReadAccess"
  DynamoReadAccess:
    Value:
      Ref: dynamoReadAccess
    Export:
      Name: !Sub "${ServiceParam}-${StageParam}-dynamoReadAccess"
  ReportingBucketArn:
    Value:
      Fn::GetAtt: [reportingBucket, Arn]
    Export:
      Name: !Sub "${ServiceParam}-${StageParam}-reportingBucketARN"
  SesSendAccess:
      Value:
        Ref: sesSendAccess
      Export:
        Name: !Sub "${ServiceParam}-${StageParam}-sesSendAccess"
  SmReaderKey:
      Value:
        Ref: smReaderKey
  SmReaderSecret:
      Value:
        Fn::GetAtt: [smReaderKey, SecretAccessKey]
  SnsPublishAccess:
      Value:
        Ref: snsPublishAccess
      Export:
        Name: !Sub "${ServiceParam}-${StageParam}-snsPublishAccess"
  UserPoolClientId:
    Value: 
      Ref: cognitoUserPoolClient
  UserImgBucket:
    Value:
      Ref: imgBucket
